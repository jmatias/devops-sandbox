app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: http://backstage-843100706.us-east-1.elb.amazonaws.com

backend:
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:7007", it's strictly private
  # and can't be reached by others.
  baseUrl: http://backstage-843100706.us-east-1.elb.amazonaws.com
  # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
  # all interfaces, the most permissive setting. The right value depends on your specific deployment.
  listen: ':7007'

  cors:
    origin: http://backstage-843100706.us-east-1.elb.amazonaws.com
    methods: [ GET, HEAD, PATCH, POST, PUT, DELETE ]
    credentials: true

  database:
    client: better-sqlite3
    connection: ':memory:'

  # config options: https://node-postgres.com/apis/client
#  database:
#    client: pg
#    connection:
#      host: ${POSTGRES_HOST}
#      port: ${POSTGRES_PORT}
#      user: ${POSTGRES_USER}
#      password: ${POSTGRES_PASSWORD}
#      # https://node-postgres.com/features/ssl
#      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
#      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
#      # ssl:
#      #   ca: # if you have a CA file and want to verify it you can uncomment this section
#      #     $file: <file-path>/ca/server.crt

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            # See https://backstage.io/docs/auth/github/provider#resolvers for more resolvers
            - resolver: usernameMatchingUserEntityName
            - resolver: emailMatchingUserEntityProfileEmail
            - resolver: usernameMatchingUserEntityName

catalog:
  # Overrides the default list locations from app-config.yaml as these contain example data.
  # See https://backstage.io/docs/features/software-catalog/#adding-components-to-the-catalog for more details
  # on how to get entities into the catalog.
  locations:
    # Local example data, replace this with your production config, these are intended for demo use only.
    # File locations are relative to the backend process, typically in a deployed context, such as in a Docker container, this will be the root
    - type: file
      target: ./examples/entities.yaml

    # Local example template
    - type: file
      target: /app/examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: /app/examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
      rules:
        - allow: [ User, Group ]
