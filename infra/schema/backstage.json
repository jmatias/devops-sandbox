{
  "$schema": "https://backstage.io/schema/config-v1",
  "title": "Application Configuration Schema",
  "type": "object",
  "required": [
    "app",
    "backend",
    "techdocs"
  ],
  "properties": {
    "app": {
      "type": "object",
      "required": [
        "baseUrl"
      ],
      "description": "Generic frontend configuration.",
      "properties": {
        "baseUrl": {
          "type": "string",
          "visibility": "frontend",
          "description": "The public absolute root URL that the frontend."
        },
        "title": {
          "type": "string",
          "visibility": "frontend",
          "description": "The title of the app, as shown in the Backstage web interface."
        },
        "datadogRum": {
          "type": "object",
          "description": "Datadog RUM events configuration",
          "required": [
            "clientToken",
            "applicationId"
          ],
          "properties": {
            "env": {
              "type": "string",
              "visibility": "frontend",
              "description": "Environment for Datadog RUM events"
            },
            "clientToken": {
              "type": "string",
              "visibility": "frontend",
              "description": "clientToken for Datadog RUM events"
            },
            "applicationId": {
              "type": "string",
              "visibility": "frontend",
              "description": "applicationId for Datadog RUM events"
            },
            "site": {
              "type": "string",
              "visibility": "frontend",
              "description": "site for Datadog RUM events"
            },
            "sessionSampleRate": {
              "type": "number",
              "visibility": "frontend",
              "description": "sample rate of Datadog RUM events"
            },
            "sessionReplaySampleRate": {
              "type": "number",
              "visibility": "frontend",
              "description": "sample rate of session replays based upon already sampled Datadog RUM events"
            }
          }
        },
        "listen": {
          "type": "object",
          "description": "Listening configuration for local development",
          "properties": {
            "host": {
              "type": "string",
              "visibility": "frontend",
              "description": "The host that the frontend should be bound to. Only used for local development."
            },
            "port": {
              "type": "number",
              "visibility": "frontend",
              "description": "The port that the frontend should be bound to. Only used for local development."
            }
          }
        },
        "https": {
          "type": "object",
          "description": "Only used for local development. The https object is passed to webpack in order to enable using https on localhost.",
          "properties": {
            "certificate": {
              "type": "object",
              "description": "Parent object containing certificate and the private key",
              "required": [
                "key",
                "cert"
              ],
              "properties": {
                "key": {
                  "type": "string",
                  "visibility": "secret",
                  "description": "Https Certificate private key. Use $file to load in a file"
                },
                "cert": {
                  "type": "string",
                  "visibility": "secret",
                  "description": "Https Certificate. Use $file to load in a file"
                }
              }
            }
          }
        },
        "packageName": {
          "description": "The name of the app package (in most Backstage repositories, this is the\n\"name\" field in `packages/app/package.json`) that content should be served\nfrom. The same app package should be added as a dependency to the backend\npackage in order for it to be accessible at runtime.\n\nIn a typical setup with a single app package, this will default to 'app'.",
          "type": "string"
        },
        "disableConfigInjection": {
          "description": "Disables the configuration injection. This can be useful if you're running in an environment\nwith a read-only filesystem, or for some other reason don't want configuration to be injected.\n\nNote that this will cause the configuration used when building the app bundle to be used, unless\na separate configuration loading strategy is set up.\n\nThis also disables configuration injection though `APP_CONFIG_` environment variables.",
          "type": "boolean"
        },
        "disableStaticFallbackCache": {
          "description": "By default the app backend plugin will cache previously deployed static assets in the database.\nIf you disable this, it is recommended to set a `staticFallbackHandler` instead.",
          "type": "boolean"
        },
        "support": {
          "description": "Information about support of this Backstage instance and how to contact the integrator team.",
          "type": "object",
          "required": [
            "items",
            "url"
          ],
          "properties": {
            "url": {
              "description": "The primary support url.",
              "visibility": "frontend",
              "type": "string"
            },
            "items": {
              "description": "A list of categorized support item groupings.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "links",
                  "title"
                ],
                "properties": {
                  "title": {
                    "description": "The title of the support item grouping.",
                    "visibility": "frontend",
                    "type": "string"
                  },
                  "icon": {
                    "description": "An optional icon for the support item grouping.",
                    "visibility": "frontend",
                    "type": "string"
                  },
                  "links": {
                    "description": "A list of support links for the Backstage instance inside this grouping.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "url"
                      ],
                      "properties": {
                        "url": {
                          "visibility": "frontend",
                          "type": "string"
                        },
                        "title": {
                          "visibility": "frontend",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "routes": {
          "type": "object",
          "properties": {
            "bindings": {
              "description": "Maps external route references to regular route references. Both the\nkey and the value is expected to be on the form `<pluginId>.<routeId>`.\nIf the value is `false`, the route will be disabled even if it has a\ndefault mapping.",
              "deepVisibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "const": false,
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        },
        "experimental": {
          "type": "object",
          "properties": {
            "packages": {
              "visibility": "frontend",
              "deepVisibility": "frontend",
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "include": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "exclude": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "const": "all",
                  "type": "string"
                }
              ]
            }
          }
        },
        "extensions": {
          "deepVisibility": "frontend",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "attachTo": {
                          "type": "object",
                          "required": [
                            "id",
                            "input"
                          ],
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "input": {
                              "type": "string"
                            }
                          }
                        },
                        "disabled": {
                          "type": "boolean"
                        },
                        "config": {}
                      }
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                }
              },
              {
                "type": "string"
              }
            ]
          }
        }
      }
    },
    "auth": {
      "type": "object",
      "description": "Configuration options for the auth plugin",
      "required": [
        "providers"
      ],
      "properties": {
        "providers": {
          "type": "object",
          "description": "The available auth-provider options and attributes",
          "additionalProperties": {
            "type": "object",
            "visibility": "frontend",
            "additionalProperties": true
          },
          "properties": {
            "saml": {
              "visibility": "frontend",
              "type": "object",
              "required": [
                "cert",
                "entryPoint",
                "issuer"
              ],
              "properties": {
                "entryPoint": {
                  "type": "string"
                },
                "logoutUrl": {
                  "type": "string"
                },
                "issuer": {
                  "type": "string"
                },
                "cert": {
                  "visibility": "secret",
                  "type": "string"
                },
                "audience": {
                  "type": "string"
                },
                "privateKey": {
                  "visibility": "secret",
                  "type": "string"
                },
                "authnContext": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "identifierFormat": {
                  "type": "string"
                },
                "decryptionPvk": {
                  "visibility": "secret",
                  "type": "string"
                },
                "signatureAlgorithm": {
                  "enum": [
                    "sha256",
                    "sha512"
                  ],
                  "type": "string"
                },
                "digestAlgorithm": {
                  "type": "string"
                },
                "acceptedClockSkewMs": {
                  "type": "number"
                }
              }
            },
            "auth0": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret",
                  "domain"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "audience": {
                    "type": "string"
                  },
                  "connection": {
                    "type": "string"
                  },
                  "connectionScope": {
                    "type": "string"
                  },
                  "sessionDuration": {}
                }
              }
            },
            "onelogin": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret",
                  "issuer"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "issuer": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "signIn": {
                    "type": "object",
                    "required": [
                      "resolvers"
                    ],
                    "properties": {
                      "resolvers": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "usernameMatchingUserEntityName"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailLocalPartMatchingUserEntityName"
                                },
                                "allowedDomains": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityProfileEmail"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "sessionDuration": {}
                }
              }
            },
            "backstageTokenExpiration": {
              "description": "The backstage token expiration."
            },
            "github": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "enterpriseInstanceUrl": {
                    "type": "string"
                  },
                  "additionalScopes": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "signIn": {
                    "type": "object",
                    "required": [
                      "resolvers"
                    ],
                    "properties": {
                      "resolvers": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "usernameMatchingUserEntityName"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailLocalPartMatchingUserEntityName"
                                },
                                "allowedDomains": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityProfileEmail"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "sessionDuration": {}
                }
              }
            },
            "guest": {
              "type": "object",
              "properties": {
                "userEntityRef": {
                  "description": "The entity reference to use for the guest user.",
                  "default": "user:development/guest",
                  "type": "string"
                },
                "ownershipEntityRefs": {
                  "description": "A list of entity references to user for ownership of the guest user if the user\n is not found in the catalog.",
                  "default": "[userEntityRef]",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "dangerouslyAllowOutsideDevelopment": {
                  "description": "Allow users to sign in with the guest provider outside of their development environments.",
                  "type": "boolean"
                }
              }
            },
            "atlassian": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "audience": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "additionalScopes": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "signIn": {
                    "type": "object",
                    "required": [
                      "resolvers"
                    ],
                    "properties": {
                      "resolvers": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "usernameMatchingUserEntityName"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailLocalPartMatchingUserEntityName"
                                },
                                "allowedDomains": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityProfileEmail"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "sessionDuration": {}
                }
              }
            },
            "bitbucket": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "additionalScopes": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "signIn": {
                    "type": "object",
                    "required": [
                      "resolvers"
                    ],
                    "properties": {
                      "resolvers": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "userIdMatchingUserEntityAnnotation"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailLocalPartMatchingUserEntityName"
                                },
                                "allowedDomains": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityProfileEmail"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "sessionDuration": {}
                }
              }
            },
            "bitbucketServer": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret",
                  "host"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "host": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "sessionDuration": {}
                }
              }
            },
            "cfaccess": {
              "visibility": "frontend",
              "type": "object",
              "required": [
                "teamName"
              ],
              "properties": {
                "teamName": {
                  "type": "string"
                },
                "serviceTokens": {
                  "deepVisibility": "secret",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "subject",
                      "token"
                    ],
                    "properties": {
                      "token": {
                        "type": "string"
                      },
                      "subject": {
                        "type": "string"
                      }
                    }
                  }
                },
                "jwtHeaderName": {
                  "type": "string"
                },
                "authorizationCookieName": {
                  "type": "string"
                },
                "signIn": {
                  "type": "object",
                  "required": [
                    "resolvers"
                  ],
                  "properties": {
                    "resolvers": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "resolver": {
                                "type": "string",
                                "const": "emailLocalPartMatchingUserEntityName"
                              },
                              "allowedDomains": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "resolver"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "resolver": {
                                "type": "string",
                                "const": "emailMatchingUserEntityProfileEmail"
                              }
                            },
                            "required": [
                              "resolver"
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "sessionDuration": {},
            "gitlab": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "audience": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "additionalScopes": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "signIn": {
                    "type": "object",
                    "required": [
                      "resolvers"
                    ],
                    "properties": {
                      "resolvers": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "usernameMatchingUserEntityName"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailLocalPartMatchingUserEntityName"
                                },
                                "allowedDomains": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityProfileEmail"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "sessionDuration": {}
                }
              }
            },
            "google": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "additionalScopes": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "signIn": {
                    "type": "object",
                    "required": [
                      "resolvers"
                    ],
                    "properties": {
                      "resolvers": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityAnnotation"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailLocalPartMatchingUserEntityName"
                                },
                                "allowedDomains": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityProfileEmail"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "sessionDuration": {}
                }
              }
            },
            "microsoft": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret",
                  "tenantId"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "tenantId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "domainHint": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "additionalScopes": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "skipUserProfile": {
                    "type": "boolean"
                  },
                  "signIn": {
                    "type": "object",
                    "required": [
                      "resolvers"
                    ],
                    "properties": {
                      "resolvers": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityAnnotation"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailLocalPartMatchingUserEntityName"
                                },
                                "allowedDomains": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityProfileEmail"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "userIdMatchingUserEntityAnnotation"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "sessionDuration": {}
                }
              }
            },
            "gcpIap": {
              "description": "Configuration for the Google Cloud Platform Identity-Aware Proxy (IAP) auth provider.",
              "type": "object",
              "required": [
                "audience"
              ],
              "properties": {
                "audience": {
                  "description": "The audience to use when validating incoming JWT tokens.\nSee https://backstage.io/docs/auth/google/gcp-iap-auth",
                  "type": "string"
                },
                "jwtHeader": {
                  "description": "The name of the header to read the JWT token from, defaults to `'x-goog-iap-jwt-assertion'`.",
                  "type": "string"
                },
                "signIn": {
                  "type": "object",
                  "required": [
                    "resolvers"
                  ],
                  "properties": {
                    "resolvers": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "resolver": {
                                "type": "string",
                                "const": "emailMatchingUserEntityAnnotation"
                              }
                            },
                            "required": [
                              "resolver"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "resolver": {
                                "type": "string",
                                "const": "idMatchingUserEntityAnnotation"
                              }
                            },
                            "required": [
                              "resolver"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "resolver": {
                                "type": "string",
                                "const": "emailLocalPartMatchingUserEntityName"
                              },
                              "allowedDomains": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "resolver"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "resolver": {
                                "type": "string",
                                "const": "emailMatchingUserEntityProfileEmail"
                              }
                            },
                            "required": [
                              "resolver"
                            ]
                          }
                        ]
                      }
                    }
                  }
                },
                "sessionDuration": {}
              }
            },
            "oauth2": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "authorizationUrl",
                  "clientId",
                  "clientSecret",
                  "tokenUrl"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "authorizationUrl": {
                    "type": "string"
                  },
                  "tokenUrl": {
                    "type": "string"
                  },
                  "scope": {
                    "deprecated": "use `additionalScopes` instead",
                    "type": "string"
                  },
                  "additionalScopes": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "disableRefresh": {
                    "type": "boolean"
                  },
                  "includeBasicAuth": {
                    "type": "boolean"
                  },
                  "signIn": {
                    "type": "object",
                    "required": [
                      "resolvers"
                    ],
                    "properties": {
                      "resolvers": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "usernameMatchingUserEntityName"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailLocalPartMatchingUserEntityName"
                                },
                                "allowedDomains": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityProfileEmail"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "sessionDuration": {}
                }
              }
            },
            "oidc": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret",
                  "metadataUrl"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "metadataUrl": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "tokenEndpointAuthMethod": {
                    "type": "string"
                  },
                  "tokenSignedResponseAlg": {
                    "type": "string"
                  },
                  "additionalScopes": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "prompt": {
                    "type": "string"
                  },
                  "signIn": {
                    "type": "object",
                    "required": [
                      "resolvers"
                    ],
                    "properties": {
                      "resolvers": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailLocalPartMatchingUserEntityName"
                                },
                                "allowedDomains": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityProfileEmail"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "sessionDuration": {}
                }
              }
            },
            "okta": {
              "visibility": "frontend",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "required": [
                  "clientId",
                  "clientSecret"
                ],
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "audience": {
                    "type": "string"
                  },
                  "authServerId": {
                    "type": "string"
                  },
                  "idp": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "additionalScopes": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "signIn": {
                    "type": "object",
                    "required": [
                      "resolvers"
                    ],
                    "properties": {
                      "resolvers": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityAnnotation"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailLocalPartMatchingUserEntityName"
                                },
                                "allowedDomains": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "resolver": {
                                  "type": "string",
                                  "const": "emailMatchingUserEntityProfileEmail"
                                }
                              },
                              "required": [
                                "resolver"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  },
                  "sessionDuration": {}
                }
              }
            }
          }
        },
        "environment": {
          "description": "The 'environment' attribute",
          "visibility": "frontend",
          "type": "string"
        },
        "session": {
          "type": "object",
          "properties": {
            "secret": {
              "description": "The secret attribute of session object.",
              "visibility": "secret",
              "type": "string"
            }
          }
        },
        "identityTokenAlgorithm": {
          "description": "JWS \"alg\" (Algorithm) Header Parameter value. Defaults to ES256.\nMust match one of the algorithms defined for IdentityClient.\nWhen setting a different algorithm, check if the `key` field\nof the `signing_keys` table can fit the length of the generated keys.\nIf not, add a knex migration file in the migrations folder.\nMore info on supported algorithms: https://github.com/panva/jose",
          "type": "string"
        },
        "keyStore": {
          "description": "To control how to store JWK data in auth-backend",
          "type": "object",
          "properties": {
            "provider": {
              "enum": [
                "database",
                "firestore",
                "memory",
                "static"
              ],
              "type": "string"
            },
            "firestore": {
              "type": "object",
              "properties": {
                "host": {
                  "description": "The host to connect to",
                  "type": "string"
                },
                "port": {
                  "description": "The port to connect to",
                  "type": "number"
                },
                "ssl": {
                  "description": "Whether to use SSL when connecting.",
                  "type": "boolean"
                },
                "projectId": {
                  "description": "The Google Cloud Project ID",
                  "type": "string"
                },
                "keyFilename": {
                  "description": "Local file containing the Service Account credentials.\nYou can omit this value to automatically read from\nGOOGLE_APPLICATION_CREDENTIALS env which is useful for local\ndevelopment.",
                  "type": "string"
                },
                "path": {
                  "description": "The path to use for the collection. Defaults to 'sessions'",
                  "type": "string"
                },
                "timeout": {
                  "description": "Timeout used for database operations. Defaults to 10000ms",
                  "type": "number"
                }
              }
            },
            "static": {
              "type": "object",
              "required": [
                "keys"
              ],
              "properties": {
                "keys": {
                  "description": "Must be declared at least once and the first one will be used for signing",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "keyId",
                      "privateKeyFile",
                      "publicKeyFile"
                    ],
                    "properties": {
                      "publicKeyFile": {
                        "description": "Path to the public key file in the SPKI format",
                        "type": "string"
                      },
                      "privateKeyFile": {
                        "description": "Path to the matching private key file in the PKCS#8 format",
                        "type": "string"
                      },
                      "keyId": {
                        "description": "id to uniquely identify this key within the JWK set",
                        "type": "string"
                      },
                      "algorithm": {
                        "description": "JWS \"alg\" (Algorithm) Header Parameter value. Defaults to ES256.\nMust match the algorithm used to generate the keys in the provided files",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "experimentalExtraAllowedOrigins": {
          "description": "Additional app origins to allow for authenticating",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "autologout": {
          "description": "Autologout feature configuration",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enable or disable the autologout feature",
              "visibility": "frontend",
              "type": "boolean"
            },
            "idleTimeoutMinutes": {
              "description": "Number of minutes after which the inactive user is logged out automatically.\nDefault is 60 minutes (1 hour)",
              "visibility": "frontend",
              "type": "number"
            },
            "promptBeforeIdleSeconds": {
              "description": "Number of seconds before the idle timeout where the user will be asked if it's still active.\nA dialog will be shown.\nDefault is 10 seconds.\nSet to 0 seconds to disable the prompt.",
              "visibility": "frontend",
              "type": "number"
            },
            "useWorkerTimers": {
              "description": "Enable/disable the usage of worker thread timers instead of main thread timers.\nDefault is true.\nIf you experience some browser incompatibility, you may try to set this to false.",
              "visibility": "frontend",
              "type": "boolean"
            },
            "logoutIfDisconnected": {
              "description": "Enable/disable the automatic logout also on users that are logged in but with no Backstage tabs open.\nDefault is true.",
              "visibility": "frontend",
              "type": "boolean"
            }
          }
        }
      }
    },
    "backend": {
      "type": "object",
      "required": [
        "baseUrl",
        "database"
      ],
      "description": "Generic backend configuration.",
      "properties": {
        "baseUrl": {
          "description": "The full base URL of the backend, as seen from the browser's point of\nview as it makes calls to the backend.",
          "type": "string",
          "visibility": "frontend"
        },
        "lifecycle": {
          "type": "object",
          "properties": {
            "startupRequestPauseTimeout": {
              "description": "The maximum time that paused requests will wait for the service to start, before returning an error.\nDefaults to 5 seconds\nSupported formats:\n- A string in the format of '1d', '2 seconds' etc. as supported by the `ms`\n  library.\n- A standard ISO formatted duration string, e.g. 'P2DT6H' or 'PT1M'.\n- An object with individual units (in plural) as keys, e.g. `{ days: 2, hours: 6 }`."
            },
            "serverShutdownDelay": {
              "description": "The minimum time that the HTTP server will delay the shutdown of the backend. During this delay health checks will be set to failing, allowing traffic to drain.\nDefaults to 0 seconds.\nSupported formats:\n- A string in the format of '1d', '2 seconds' etc. as supported by the `ms`\n  library.\n- A standard ISO formatted duration string, e.g. 'P2DT6H' or 'PT1M'.\n- An object with individual units (in plural) as keys, e.g. `{ days: 2, hours: 6 }`."
            }
          }
        },
        "listen": {
          "description": "Address that the backend should listen to.",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "host": {
                  "description": "Address of the interface that the backend should bind to.",
                  "type": "string"
                },
                "port": {
                  "description": "Port that the backend should listen to.",
                  "type": [
                    "string",
                    "number"
                  ]
                }
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "https": {
          "description": "HTTPS configuration for the backend. If omitted the backend will serve HTTP.\n\nSetting this to `true` will cause self-signed certificates to be generated, which\ncan be useful for local development or other non-production scenarios.",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "certificate": {
                  "description": "Certificate configuration",
                  "type": "object",
                  "required": [
                    "cert",
                    "key"
                  ],
                  "properties": {
                    "cert": {
                      "description": "PEM encoded certificate. Use $file to load in a file",
                      "type": "string"
                    },
                    "key": {
                      "description": "PEM encoded certificate key. Use $file to load in a file.",
                      "visibility": "secret",
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "const": true,
              "type": "boolean"
            }
          ]
        },
        "auth": {
          "description": "Options used by the default auth, httpAuth and userInfo services.",
          "type": "object",
          "properties": {
            "keys": {
              "description": "Keys shared by all backends for signing and validating backend tokens.",
              "deprecated": "this will be removed when the backwards compatibility is no longer needed with backend-common",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "secret"
                ],
                "properties": {
                  "secret": {
                    "description": "Secret for generating tokens. Should be a base64 string, recommended\nlength is 24 bytes.",
                    "visibility": "secret",
                    "type": "string"
                  }
                }
              }
            },
            "dangerouslyDisableDefaultAuthPolicy": {
              "description": "This disables the otherwise default auth policy, which requires all\nrequests to be authenticated with either user or service credentials.\n\nDisabling this check means that the backend will no longer block\nunauthenticated requests, but instead allow them to pass through to\nplugins.\n\nIf permissions are enabled, unauthenticated requests will be treated\nexactly as such, leaving it to the permission policy to determine what\npermissions should be allowed for an unauthenticated identity. Note\nthat this will also apply to service-to-service calls between plugins\nunless you configure credentials for service calls.",
              "type": "boolean"
            },
            "pluginKeyStore": {
              "description": "Controls how to store keys for plugin-to-plugin auth",
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "database"
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "static"
                    },
                    "static": {
                      "type": "object",
                      "required": [
                        "keys"
                      ],
                      "properties": {
                        "keys": {
                          "description": "Must be declared at least once and the first one will be used for signing.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "keyId",
                              "publicKeyFile"
                            ],
                            "properties": {
                              "publicKeyFile": {
                                "description": "Path to the public key file in the SPKI format. Should be an absolute path.",
                                "type": "string"
                              },
                              "privateKeyFile": {
                                "description": "Path to the matching private key file in the PKCS#8 format. Should be an absolute path.\n\nThe first array entry must specify a private key file, the rest must not.",
                                "type": "string"
                              },
                              "keyId": {
                                "description": "ID to uniquely identify this key within the JWK set.",
                                "type": "string"
                              },
                              "algorithm": {
                                "description": "JWS \"alg\" (Algorithm) Header Parameter value. Defaults to ES256.\nMust match the algorithm used to generate the keys in the provided files",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "static",
                    "type"
                  ]
                }
              ]
            },
            "externalAccess": {
              "description": "Configures methods of external access, ie ways for callers outside of\nthe Backstage ecosystem to get authorized for access to APIs that do\nnot permit unauthorized access.",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "This is the legacy service-to-service access method, where a set\nof static keys were shared among plugins and used for symmetric\nsigning and verification. These correspond to the old\n`backend.auth.keys` set and retain their behavior for backwards\ncompatibility. Please migrate to other access methods when\npossible.\n\nCallers generate JWT tokens with the following payload:\n\n```json\n{\n  \"sub\": \"backstage-plugin\",\n  \"exp\": <epoch seconds one hour in the future>\n}\n```\n\nAnd sign them with HS256, using the base64 decoded secret. The\ntokens are then passed along with requests in the Authorization\nheader:\n\n```\nAuthorization: Bearer eyJhbGciOiJIUzI...\n```",
                        "type": "string",
                        "const": "legacy"
                      },
                      "options": {
                        "type": "object",
                        "required": [
                          "secret",
                          "subject"
                        ],
                        "properties": {
                          "secret": {
                            "description": "Any set of base64 encoded random bytes to be used as both the\nsigning and verification key. Should be sufficiently long so as\nnot to be easy to guess by brute force.\n\nCan be generated eg using\n\n```sh\nnode -p 'require(\"crypto\").randomBytes(24).toString(\"base64\")'\n```",
                            "visibility": "secret",
                            "type": "string"
                          },
                          "subject": {
                            "description": "Sets the subject of the principal, when matching this token.\nUseful for debugging and tracking purposes.",
                            "type": "string"
                          }
                        }
                      },
                      "accessRestrictions": {
                        "description": "Restricts what types of access that are permitted for this access\nmethod. If no access restrictions are given, it'll have unlimited\naccess. This access restriction applies for the framework level;\nindividual plugins may have their own access control mechanisms\non top of this.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "plugin"
                          ],
                          "properties": {
                            "plugin": {
                              "description": "Permit access to make requests to this plugin.\n\nCan be further refined by setting additional fields below.",
                              "type": "string"
                            },
                            "permission": {
                              "description": "If given, this method is limited to only performing actions\nwith these named permissions in this plugin.\n\nNote that this only applies where permissions checks are\nenabled in the first place. Endpoints that are not protected by\nthe permissions system at all, are not affected by this\nsetting.",
                              "anyOf": [
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "permissionAttribute": {
                              "description": "If given, this method is limited to only performing actions\nwhose permissions have these attributes.\n\nNote that this only applies where permissions checks are\nenabled in the first place. Endpoints that are not protected by\nthe permissions system at all, are not affected by this\nsetting.",
                              "type": "object",
                              "properties": {
                                "action": {
                                  "description": "One of more of 'create', 'read', 'update', or 'delete'.",
                                  "anyOf": [
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "options",
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "This access method consists of random static tokens that can be\nhanded out to callers.\n\nThe tokens are then passed along verbatim with requests in the\nAuthorization header:\n\n```\nAuthorization: Bearer eZv5o+fW3KnR3kVabMW4ZcDNLPl8nmMW\n```",
                        "type": "string",
                        "const": "static"
                      },
                      "options": {
                        "type": "object",
                        "required": [
                          "subject",
                          "token"
                        ],
                        "properties": {
                          "token": {
                            "description": "A raw token that can be any string, but for security reasons\nshould be sufficiently long so as not to be easy to guess by\nbrute force.\n\nCan be generated eg using\n\n```sh\nnode -p 'require(\"crypto\").randomBytes(24).toString(\"base64\")'\n```\n\nSince the tokens can be any string, you are free to add\nadditional identifying data to them if you like. For example,\nadding a `freben-local-dev-` prefix for debugging purposes to a\ntoken that you know will be handed out for use as a personal\naccess token during development.",
                            "visibility": "secret",
                            "type": "string"
                          },
                          "subject": {
                            "description": "Sets the subject of the principal, when matching this token.\nUseful for debugging and tracking purposes.",
                            "type": "string"
                          }
                        }
                      },
                      "accessRestrictions": {
                        "description": "Restricts what types of access that are permitted for this access\nmethod. If no access restrictions are given, it'll have unlimited\naccess. This access restriction applies for the framework level;\nindividual plugins may have their own access control mechanisms\non top of this.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "plugin"
                          ],
                          "properties": {
                            "plugin": {
                              "description": "Permit access to make requests to this plugin.\n\nCan be further refined by setting additional fields below.",
                              "type": "string"
                            },
                            "permission": {
                              "description": "If given, this method is limited to only performing actions\nwith these named permissions in this plugin.\n\nNote that this only applies where permissions checks are\nenabled in the first place. Endpoints that are not protected by\nthe permissions system at all, are not affected by this\nsetting.",
                              "anyOf": [
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "permissionAttribute": {
                              "description": "If given, this method is limited to only performing actions\nwhose permissions have these attributes.\n\nNote that this only applies where permissions checks are\nenabled in the first place. Endpoints that are not protected by\nthe permissions system at all, are not affected by this\nsetting.",
                              "type": "object",
                              "properties": {
                                "action": {
                                  "description": "One of more of 'create', 'read', 'update', or 'delete'.",
                                  "anyOf": [
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "options",
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "This access method consists of a JWKS endpoint that can be used to\nverify JWT tokens.\n\nCallers generate JWT tokens via 3rd party tooling\nand pass them in the Authorization header:\n\n```\nAuthorization: Bearer eZv5o+fW3KnR3kVabMW4ZcDNLPl8nmMW\n```",
                        "type": "string",
                        "const": "jwks"
                      },
                      "options": {
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "description": "The full URL of the JWKS endpoint.",
                            "type": "string"
                          },
                          "algorithm": {
                            "description": "Sets the algorithm(s) that should be used to verify the JWT tokens.\nThe passed JWTs must have been signed using one of the listed algorithms.",
                            "anyOf": [
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "issuer": {
                            "description": "Sets the issuer(s) that should be used to verify the JWT tokens.\nPassed JWTs must have an `iss` claim which matches one of the specified issuers.",
                            "anyOf": [
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "audience": {
                            "description": "Sets the audience(s) that should be used to verify the JWT tokens.\nThe passed JWTs must have an \"aud\" claim that matches one of the audiences specified,\nor have no audience specified.",
                            "anyOf": [
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "subjectPrefix": {
                            "description": "Sets an optional subject prefix. Passes the subject to called plugins.\nUseful for debugging and tracking purposes.",
                            "type": "string"
                          }
                        }
                      },
                      "accessRestrictions": {
                        "description": "Restricts what types of access that are permitted for this access\nmethod. If no access restrictions are given, it'll have unlimited\naccess. This access restriction applies for the framework level;\nindividual plugins may have their own access control mechanisms\non top of this.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "plugin"
                          ],
                          "properties": {
                            "plugin": {
                              "description": "Permit access to make requests to this plugin.\n\nCan be further refined by setting additional fields below.",
                              "type": "string"
                            },
                            "permission": {
                              "description": "If given, this method is limited to only performing actions\nwith these named permissions in this plugin.\n\nNote that this only applies where permissions checks are\nenabled in the first place. Endpoints that are not protected by\nthe permissions system at all, are not affected by this\nsetting.",
                              "anyOf": [
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "permissionAttribute": {
                              "description": "If given, this method is limited to only performing actions\nwhose permissions have these attributes.\n\nNote that this only applies where permissions checks are\nenabled in the first place. Endpoints that are not protected by\nthe permissions system at all, are not affected by this\nsetting.",
                              "type": "object",
                              "properties": {
                                "action": {
                                  "description": "One of more of 'create', 'read', 'update', or 'delete'.",
                                  "anyOf": [
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "options",
                      "type"
                    ]
                  }
                ]
              }
            }
          }
        },
        "database": {
          "description": "Database connection configuration, select base database type using the `client` field",
          "type": "object",
          "required": [
            "client",
            "connection"
          ],
          "properties": {
            "client": {
              "description": "Default database client to use",
              "enum": [
                "better-sqlite3",
                "pg",
                "sqlite3"
              ],
              "type": "string"
            },
            "connection": {
              "description": "Base database connection string, or object with individual connection properties",
              "visibility": "secret",
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "description": "The specific config for cloudsql connections",
                      "type": "string",
                      "const": "cloudsql"
                    },
                    "instance": {
                      "description": "The instance connection name for the cloudsql instance, e.g. `project:region:instance`",
                      "type": "string"
                    },
                    "ipAddressType": {
                      "description": "The ip address type to use for the connection. Defaults to 'PUBLIC'",
                      "enum": [
                        "PRIVATE",
                        "PSC",
                        "PUBLIC"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "instance",
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "additionalProperties": {},
                  "properties": {
                    "password": {
                      "description": "Password that belongs to the client User",
                      "visibility": "secret",
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "prefix": {
              "description": "Database name prefix override",
              "type": "string"
            },
            "ensureExists": {
              "description": "Whether to ensure the given database exists by creating it if it does not.\nDefaults to true if unspecified.",
              "type": "boolean"
            },
            "ensureSchemaExists": {
              "description": "Whether to ensure the given database schema exists by creating it if it does not.\nDefaults to false if unspecified.\n\nNOTE: Currently only supported by the `pg` client when pluginDivisionMode: schema",
              "type": "boolean"
            },
            "pluginDivisionMode": {
              "description": "How plugins databases are managed/divided in the provided database instance.\n\n`database` -> Plugins are each given their own database to manage their schemas/tables.\n\n`schema` -> Plugins will be given their own schema (in the specified/default database)\n            to manage their tables.\n\nNOTE: Currently only supported by the `pg` client.",
              "default": "database",
              "enum": [
                "database",
                "schema"
              ],
              "type": "string"
            },
            "role": {
              "description": "Configures the ownership of newly created schemas in pg databases.",
              "type": "string"
            },
            "knexConfig": {
              "description": "Arbitrary config object to pass to knex when initializing\n(https://knexjs.org/#Installation-client). Most notable is the debug\nand asyncStackTraces booleans",
              "type": "object",
              "additionalProperties": true
            },
            "skipMigrations": {
              "description": "Skip running database migrations.",
              "type": "boolean"
            },
            "plugin": {
              "description": "Plugin specific database configuration and client override",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "client": {
                    "description": "Database client override",
                    "enum": [
                      "better-sqlite3",
                      "pg",
                      "sqlite3"
                    ],
                    "type": "string"
                  },
                  "connection": {
                    "description": "Database connection string or Knex object override",
                    "visibility": "secret",
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "The specific config for cloudsql connections",
                            "type": "string",
                            "const": "cloudsql"
                          },
                          "instance": {
                            "description": "The instance connection name for the cloudsql instance, e.g. `project:region:instance`",
                            "type": "string"
                          }
                        },
                        "required": [
                          "instance",
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": {},
                        "properties": {
                          "password": {
                            "description": "Password that belongs to the client User",
                            "visibility": "secret",
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "ensureExists": {
                    "description": "Whether to ensure the given database exists by creating it if it does not.\nDefaults to base config if unspecified.",
                    "type": "boolean"
                  },
                  "ensureSchemaExists": {
                    "description": "Whether to ensure the given database schema exists by creating it if it does not.\nDefaults to false if unspecified.\n\nNOTE: Currently only supported by the `pg` client when pluginDivisionMode: schema",
                    "type": "boolean"
                  },
                  "knexConfig": {
                    "description": "Arbitrary config object to pass to knex when initializing\n(https://knexjs.org/#Installation-client). Most notable is the\ndebug and asyncStackTraces booleans.\n\nThis is merged recursively into the base knexConfig",
                    "type": "object",
                    "additionalProperties": true
                  },
                  "role": {
                    "description": "Configures the ownership of newly created schemas in pg databases.",
                    "type": "string"
                  },
                  "skipMigrations": {
                    "description": "Skip running database migrations.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "cache": {
          "description": "Cache connection configuration, select cache type using the `store` field",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "store": {
                  "type": "string",
                  "const": "memory"
                },
                "defaultTtl": {
                  "description": "An optional default TTL (in milliseconds, if given as a number)."
                }
              },
              "required": [
                "store"
              ]
            },
            {
              "type": "object",
              "properties": {
                "store": {
                  "type": "string",
                  "const": "redis"
                },
                "connection": {
                  "description": "A redis connection string in the form `redis://user:pass@host:port`.",
                  "visibility": "secret",
                  "type": "string"
                },
                "defaultTtl": {
                  "description": "An optional default TTL (in milliseconds, if given as a number)."
                }
              },
              "required": [
                "connection",
                "store"
              ]
            },
            {
              "type": "object",
              "properties": {
                "store": {
                  "type": "string",
                  "const": "memcache"
                },
                "connection": {
                  "description": "A memcache connection string in the form `user:pass@host:port`.",
                  "visibility": "secret",
                  "type": "string"
                },
                "defaultTtl": {
                  "description": "An optional default TTL (in milliseconds)."
                }
              },
              "required": [
                "connection",
                "store"
              ]
            }
          ]
        },
        "cors": {
          "type": "object",
          "properties": {
            "origin": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "methods": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "allowedHeaders": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "exposedHeaders": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "credentials": {
              "type": "boolean"
            },
            "maxAge": {
              "type": "number"
            },
            "preflightContinue": {
              "type": "boolean"
            },
            "optionsSuccessStatus": {
              "type": "number"
            }
          }
        },
        "csp": {
          "description": "Content Security Policy options.\n\nThe keys are the plain policy ID, e.g. \"upgrade-insecure-requests\". The\nvalues are on the format that the helmet library expects them, as an\narray of strings. There is also the special value false, which means to\nremove the default value that Backstage puts in place for that policy.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "const": false,
                "type": "boolean"
              }
            ]
          }
        },
        "health": {
          "description": "Options for the health check service and endpoint.",
          "type": "object",
          "properties": {
            "headers": {
              "description": "Additional headers to always include in the health check response.\n\nIt can be a good idea to set a header that uniquely identifies your service\nin a multi-service environment. This ensures that the health check that is\nconfigured for your service is actually hitting your service and not another.\n\nFor example, if using Envoy you can use the `service_name_matcher` configuration\nand set the `x-envoy-upstream-healthchecked-cluster` header to a matching value.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "reading": {
          "description": "Configuration related to URL reading, used for example for reading catalog info\nfiles, scaffolder templates, and techdocs content.",
          "type": "object",
          "properties": {
            "allow": {
              "description": "A list of targets to allow outgoing requests to. Users will be able to make\nrequests on behalf of the backend to the targets that are allowed by this list.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "host"
                ],
                "properties": {
                  "host": {
                    "description": "A host to allow outgoing requests to, being either a full host or\na subdomain wildcard pattern with a leading `*`. For example `example.com`\nand `*.example.com` are valid values, `prod.*.example.com` is not.\nThe host may also contain a port, for example `example.com:8080`.",
                    "type": "string"
                  },
                  "paths": {
                    "description": "An optional list of paths. In case they are present only targets matching\nany of them will are allowed. You can use trailing slashes to make sure only\nsubdirectories are allowed, for example `/mydir/` will allow targets with\npaths like `/mydir/a` but will block paths like `/mydir2`.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "packages": {
          "description": "Used by the feature discovery service",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "include": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "exclude": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "const": "all",
              "type": "string"
            }
          ]
        },
        "startup": {
          "type": "object",
          "properties": {
            "default": {
              "type": "object",
              "properties": {
                "onPluginBootFailure": {
                  "description": "The default value for `onPluginBootFailure` if not specified for a particular plugin.\nThis defaults to 'abort', which means `onPluginBootFailure: continue` must be specified\nfor backend startup to continue on plugin boot failure. This can also be set to\n'continue', which flips the logic for individual plugins so that they must be set to\n`onPluginBootFailure: abort` to be required.",
                  "enum": [
                    "abort",
                    "continue"
                  ],
                  "type": "string"
                }
              }
            },
            "plugins": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "onPluginBootFailure": {
                    "description": "Used to control backend startup behavior when this plugin fails to boot up. Setting\nthis to `continue` allows the backend to continue starting up, even if this plugin\nfails. This can enable leaving a crashing plugin installed, but still permit backend\nstartup, which may help troubleshoot data-dependent issues. Plugin failures for plugins\nset to `abort` are fatal (this is the default unless overridden by the `default`\nsetting).",
                    "enum": [
                      "abort",
                      "continue"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "workingDirectory": {
          "description": "An absolute path to a directory that can be used as a working dir, for\nexample as scratch space for large operations.",
          "type": "string"
        }
      }
    },
    "discovery": {
      "description": "Options used by the default discovery service.",
      "type": "object",
      "required": [
        "endpoints"
      ],
      "visibility": "frontend",
      "properties": {
        "endpoints": {
          "description": "A list of target baseUrls and the associated plugins.",
          "type": "array",
          "visibility": "frontend",
          "items": {
            "type": "object",
            "required": [
              "plugins",
              "target"
            ],
            "properties": {
              "target": {
                "description": "The target base URL to use for the plugin.\n\nCan be either a string or an object with internal and external keys.\nTargets with `{{pluginId}}` or `{{ pluginId }} in the URL will be replaced with the plugin ID.",
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "external": {
                        "visibility": "frontend",
                        "type": "string"
                      },
                      "internal": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "string"
                  }
                ],
                "visibility": "frontend"
              },
              "plugins": {
                "description": "Array of plugins which use the target base URL.",
                "type": "array",
                "visibility": "frontend",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "catalog": {
      "description": "Configuration options for the catalog plugin.",
      "type": "object",
      "properties": {
        "rules": {
          "description": "Rules to apply to all catalog entities, from any location.\n\nAn undefined list of matchers means match all, an empty list of\nmatchers means match none.\n\nThis is commonly used to put in what amounts to an allowlist of kinds\nthat regular users of Backstage are permitted to register locations\nfor. This can be used to stop them from registering yaml files\ndescribing for example a Group entity called \"admin\" that they make\nthemselves members of, or similar.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "allow"
            ],
            "properties": {
              "allow": {
                "description": "Allow entities of these particular kinds.\n\nE.g. [\"Component\", \"API\", \"Template\", \"Location\"]",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "locations": {
                "description": "Limit this rule to a specific location\n\nExample with a fixed location\n { \"type\": \"url\", \"exact\": \"https://github.com/a/b/blob/file.yaml\"}\n\nExample using a Regex\n { \"type\": \"url\", \"pattern\": \"https://github.com/org/*\\/blob/master/*.yaml\"}\n\nUsing both exact and pattern will result in an error starting the application",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "description": "The type of location, e.g. \"url\".",
                      "type": "string"
                    },
                    "exact": {
                      "description": "The exact location, e.g.\n\"https://github.com/org/repo/blob/master/users.yaml\".\n\nThe exact location can also be used to match on locations\nthat contain glob characters themselves, e.g.\n\"https://github.com/org/*\\/blob/master/*.yaml\".",
                      "type": "string"
                    },
                    "pattern": {
                      "description": "The pattern allowed for the location, e.g.\n\"https://github.com/org/*\\/blob/master/*.yaml\".",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "readonly": {
          "description": "Readonly defines whether the catalog allows writes after startup.\n\nSetting 'readonly=false' allows users to register their own components.\nThis is the default value.\n\nSetting 'readonly=true' configures catalog to only allow reads. This can\nbe used in combination with static locations to only serve operator\nprovided locations. Effectively this removes the ability to register new\ncomponents to a running backstage instance.",
          "type": "boolean"
        },
        "locations": {
          "description": "A set of static locations that the catalog shall always keep itself\nup-to-date with. This is commonly used for large, permanent integrations\nthat are defined by the Backstage operators at an organization, rather\nthan individual things that users register dynamically.\n\nThese have (optional) rules of their own. These override what the global\nrules above specify. This way, you can prevent everybody from register\ne.g. User and Group entities, except for one or a few static locations\nthat have those two kinds explicitly allowed.\n\nFor example:\n\n```yaml\nrules:\n  - allow: [Component, API, Template, Location]\nlocations:\n  - type: url\n    target: https://github.com/org/repo/blob/master/users.yaml\n    rules:\n      - allow: [User, Group]\n  - type: url\n    target: https://github.com/org/repo/blob/master/systems.yaml\n    rules:\n      - allow: [System]\n```",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "target",
              "type"
            ],
            "properties": {
              "type": {
                "description": "The type of location, e.g. \"url\".",
                "type": "string"
              },
              "target": {
                "description": "The target URL of the location, e.g.\n\"https://github.com/org/repo/blob/master/users.yaml\".",
                "type": "string"
              },
              "rules": {
                "description": "Optional extra rules that apply to this particular location.\n\nThese override the global rules above.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "allow"
                  ],
                  "properties": {
                    "allow": {
                      "description": "Allow entities of these particular kinds.\n\nE.g. [\"Group\", \"User\"]",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "disableRelationsCompatibility": {
          "description": "Disables the compatibility layer for relations in returned entities that\nensures that all relations objects have both `target` and `targetRef`.\n\nEnabling this option significantly reduces the memory usage of the\ncatalog, and slightly increases performance, but may break consumers that\nrely on the existence of `target` in the relations objects.",
          "type": "boolean"
        },
        "orphanStrategy": {
          "description": "The strategy to use for entities that are orphaned, i.e. no longer have\nany other entities or providers referencing them. The default value is\n\"keep\".",
          "enum": [
            "delete",
            "keep"
          ],
          "type": "string"
        },
        "orphanProviderStrategy": {
          "description": "The strategy to use for entities that are referenced by providers that are orphaned,\ni.e. entities with no providers currently configured in the catalog. The default value is\n\"keep\".",
          "enum": [
            "delete",
            "keep"
          ],
          "type": "string"
        },
        "stitchingStrategy": {
          "description": "The strategy to use when stitching together the final entities.",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "mode": {
                  "description": "Perform stitching in-band immediately when needed",
                  "type": "string",
                  "const": "immediate"
                }
              },
              "required": [
                "mode"
              ]
            },
            {
              "type": "object",
              "properties": {
                "mode": {
                  "description": "Defer stitching to be performed asynchronously",
                  "type": "string",
                  "const": "deferred"
                },
                "pollingInterval": {
                  "description": "Polling interval for tasks in seconds"
                },
                "stitchTimeout": {
                  "description": "How long to wait for a stitch to complete before giving up in seconds"
                }
              },
              "required": [
                "mode"
              ]
            }
          ]
        },
        "processingInterval": {
          "description": "The interval at which the catalog should process its entities."
        },
        "useUrlReadersSearch": {
          "description": "Defines if the UrlReaderProcessor should always call the search method of the\ndifferent UrlReaders.\n\nIf set to false, the UrlReaderProcessor will use the legacy behavior that tries to\nparse a Git URL and calls search if there's wildcard patterns and readUrl otherwise.\n\nIf set to true, the UrlReaderProcessor always call the search method and lets each UrlReader\ndetermine if it's a search pattern or not.\n\nThis flag is temporary and will be enabled by default in future releases.",
          "type": "boolean"
        },
        "experimentalPagination": {
          "deepVisibility": "frontend",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "limit": {
                  "type": "number"
                }
              }
            },
            {
              "type": "boolean"
            }
          ]
        },
        "import": {
          "description": "List of import flow specific options and attributes",
          "type": "object",
          "properties": {
            "entityFilename": {
              "description": "Catalog entity descriptor filename, defaults to \"catalog-info.yaml\"",
              "visibility": "frontend",
              "type": "string"
            },
            "pullRequestBranchName": {
              "description": "A branch name used in pull request when registering existing component via UI\nValid git refname required, see: https://git-scm.com/docs/git-check-ref-format\nDefaults to \"backstage-integration\"",
              "visibility": "frontend",
              "type": "string"
            }
          }
        }
      }
    },
    "kubernetes": {
      "type": "object",
      "required": [
        "clusterLocatorMethods",
        "serviceLocatorMethod"
      ],
      "properties": {
        "objectTypes": {
          "type": "array",
          "items": {
            "enum": [
              "configmaps",
              "cronjobs",
              "customresources",
              "daemonsets",
              "deployments",
              "horizontalpodautoscalers",
              "ingresses",
              "jobs",
              "limitranges",
              "pods",
              "replicasets",
              "resourcequotas",
              "services",
              "statefulsets"
            ],
            "type": "string"
          }
        },
        "serviceLocatorMethod": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "enum": [
                "catalogRelation",
                "multiTenant",
                "singleTenant"
              ],
              "type": "string"
            }
          }
        },
        "clusterLocatorMethods": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "visibility": "frontend",
                    "type": "string",
                    "const": "config"
                  },
                  "clusters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name",
                        "url"
                      ],
                      "properties": {
                        "url": {
                          "visibility": "frontend",
                          "type": "string"
                        },
                        "name": {
                          "visibility": "frontend",
                          "type": "string"
                        },
                        "title": {
                          "visibility": "frontend",
                          "type": "string"
                        },
                        "serviceAccountToken": {
                          "visibility": "secret",
                          "type": "string"
                        },
                        "authProvider": {
                          "visibility": "frontend",
                          "type": "string"
                        },
                        "authMetadata": {
                          "visibility": "secret",
                          "type": "object",
                          "additionalProperties": true
                        },
                        "oidcTokenProvider": {
                          "visibility": "frontend",
                          "type": "string"
                        },
                        "skipTLSVerify": {
                          "visibility": "frontend",
                          "type": "boolean"
                        },
                        "skipMetricsLookup": {
                          "visibility": "frontend",
                          "type": "boolean"
                        },
                        "caData": {
                          "visibility": "secret",
                          "type": "string"
                        },
                        "caFile": {
                          "visibility": "secret",
                          "type": "string"
                        },
                        "customResources": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "apiVersion",
                              "group",
                              "plural"
                            ],
                            "properties": {
                              "group": {
                                "type": "string"
                              },
                              "apiVersion": {
                                "type": "string"
                              },
                              "plural": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "clusters",
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "visibility": "frontend",
                    "type": "string",
                    "const": "catalog"
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "visibility": "frontend",
                    "type": "string",
                    "const": "localKubectlProxy"
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "visibility": "frontend",
                    "type": "string",
                    "const": "gke"
                  },
                  "projectId": {
                    "visibility": "frontend",
                    "type": "string"
                  },
                  "region": {
                    "visibility": "frontend",
                    "type": "string"
                  },
                  "authProvider": {
                    "visibility": "frontend",
                    "type": "string"
                  },
                  "skipTLSVerify": {
                    "visibility": "frontend",
                    "type": "boolean"
                  },
                  "skipMetricsLookup": {
                    "visibility": "frontend",
                    "type": "boolean"
                  }
                },
                "required": [
                  "projectId",
                  "type"
                ]
              }
            ]
          }
        },
        "customResources": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "apiVersion",
              "group",
              "plural"
            ],
            "properties": {
              "group": {
                "type": "string"
              },
              "apiVersion": {
                "type": "string"
              },
              "plural": {
                "type": "string"
              }
            }
          }
        },
        "apiVersionOverrides": {
          "description": "(Optional) API Version Overrides\nIf set, the specified api version will be used to make requests for the corresponding object.\nIf running a legacy Kubernetes version, you may use this to override the default api versions\nthat are not supported in your cluster.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "properties": {
            "pods": {
              "type": "string"
            },
            "services": {
              "type": "string"
            },
            "configmaps": {
              "type": "string"
            },
            "deployments": {
              "type": "string"
            },
            "limitranges": {
              "type": "string"
            },
            "resourcequotas": {
              "type": "string"
            },
            "replicasets": {
              "type": "string"
            },
            "horizontalpodautoscalers": {
              "type": "string"
            },
            "jobs": {
              "type": "string"
            },
            "cronjobs": {
              "type": "string"
            },
            "ingresses": {
              "type": "string"
            },
            "customresources": {
              "type": "string"
            },
            "statefulsets": {
              "type": "string"
            },
            "daemonsets": {
              "type": "string"
            }
          }
        },
        "podExecTerminal": {
          "description": "Pod Exec Terminal config",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enable `PodExecTerminal` UI feature",
              "visibility": "frontend",
              "type": "boolean"
            }
          }
        },
        "frontend": {
          "description": "Frontend config",
          "type": "object",
          "properties": {
            "podDelete": {
              "description": "Pod Delete config",
              "type": "object",
              "properties": {
                "enabled": {
                  "description": "Enable `podDelete` UI feature",
                  "visibility": "frontend",
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "permission": {
      "description": "Configuration options for Backstage permissions and authorization",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Whether authorization is enabled in Backstage. Defaults to false, which means authorization\nrequests will be automatically allowed without invoking the authorization policy.",
          "visibility": "frontend",
          "type": "boolean"
        }
      }
    },
    "proxy": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "target": {
                "description": "Target of the proxy. Url string to be parsed with the url module.",
                "type": "string"
              },
              "headers": {
                "description": "Object with extra headers to be added to target requests.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "properties": {
                  "Authorization": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "authorization": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "X-Api-Key": {
                    "visibility": "secret",
                    "type": "string"
                  },
                  "x-api-key": {
                    "visibility": "secret",
                    "type": "string"
                  }
                }
              },
              "changeOrigin": {
                "description": "Changes the origin of the host header to the target URL. Default: true.",
                "type": "boolean"
              },
              "pathRewrite": {
                "description": "Rewrite target's url path. Object-keys will be used as RegExp to match paths.\nIf pathRewrite is not specified, it is set to a single rewrite that removes the entire prefix and route.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "allowedMethods": {
                "description": "Limit the forwarded HTTP methods, for example allowedMethods: ['GET'] to enforce read-only access.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "allowedHeaders": {
                "description": "Limit the forwarded HTTP methods. By default, only the headers that are considered safe for CORS\nand headers that are set by the proxy will be forwarded.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "credentials": {
                "description": "The credentials policy to apply.",
                "enum": [
                  "dangerously-allow-unauthenticated",
                  "forward",
                  "require"
                ],
                "type": "string"
              }
            },
            "required": [
              "target"
            ]
          },
          {
            "type": "string"
          }
        ]
      },
      "properties": {
        "skipInvalidProxies": {
          "description": "Rather than failing to start up, the proxy backend will instead just warn on invalid endpoints.",
          "type": "boolean"
        },
        "reviveConsumedRequestBodies": {
          "description": "Revive request bodies that have already been consumed by earlier middleware.",
          "type": "boolean"
        },
        "endpoints": {
          "description": "A list of forwarding-proxies. Each key is a route to match,\nbelow the prefix that the proxy plugin is mounted on. It must\nstart with a '/'.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "target": {
                    "description": "Target of the proxy. Url string to be parsed with the url module.",
                    "type": "string"
                  },
                  "headers": {
                    "description": "Object with extra headers to be added to target requests.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "properties": {
                      "Authorization": {
                        "visibility": "secret",
                        "type": "string"
                      },
                      "authorization": {
                        "visibility": "secret",
                        "type": "string"
                      },
                      "X-Api-Key": {
                        "visibility": "secret",
                        "type": "string"
                      },
                      "x-api-key": {
                        "visibility": "secret",
                        "type": "string"
                      }
                    }
                  },
                  "changeOrigin": {
                    "description": "Changes the origin of the host header to the target URL. Default: true.",
                    "type": "boolean"
                  },
                  "pathRewrite": {
                    "description": "Rewrite target's url path. Object-keys will be used as RegExp to match paths.\nIf pathRewrite is not specified, it is set to a single rewrite that removes the entire prefix and route.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "allowedMethods": {
                    "description": "Limit the forwarded HTTP methods, for example allowedMethods: ['GET'] to enforce read-only access.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "allowedHeaders": {
                    "description": "Limit the forwarded HTTP methods. By default, only the headers that are considered safe for CORS\nand headers that are set by the proxy will be forwarded.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "credentials": {
                    "description": "The credentials policy to apply.",
                    "enum": [
                      "dangerously-allow-unauthenticated",
                      "forward",
                      "require"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "target"
                ]
              },
              {
                "type": "string"
              }
            ]
          }
        }
      }
    },
    "scaffolder": {
      "description": "Configuration options for the scaffolder plugin",
      "type": "object",
      "properties": {
        "defaultAuthor": {
          "description": "The commit author info used when new components are created.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        },
        "defaultCommitSigningKey": {
          "description": "Default PGP signing key for signing commits.",
          "visibility": "secret",
          "type": "string"
        },
        "defaultCommitMessage": {
          "description": "The commit message used when new components are created.",
          "type": "string"
        },
        "concurrentTasksLimit": {
          "description": "Sets the number of concurrent tasks that can be run at any given time on the TaskWorker.\n\nDefaults to 10.\n\nSet to 0 to disable task workers altogether.",
          "type": "number"
        },
        "EXPERIMENTAL_gracefulShutdown": {
          "description": "Tries to wait for tasks to finish during SIGTERM before shutting down the TaskWorker.",
          "type": "boolean"
        },
        "EXPERIMENTAL_recoverTasks": {
          "description": "Sets the tasks recoverability on system start up.\n\nIf not specified, the default value is false.",
          "type": "boolean"
        },
        "EXPERIMENTAL_workspaceSerialization": {
          "description": "Sets the serialization of the workspace to have an ability to rerun the failed task.",
          "type": "boolean"
        },
        "EXPERIMENTAL_workspaceSerializationProvider": {
          "description": "Sets the provider for workspace serialization.\n\nBy default, it is your database.",
          "type": "string"
        },
        "EXPERIMENTAL_recoverTasksTimeout": {
          "description": "Every task which is in progress state and having a last heartbeat longer than a specified timeout is going to\nbe attempted to recover.\n\nIf not specified, the default value is 5 seconds."
        },
        "taskTimeoutJanitorFrequency": {
          "description": "Makes sure to auto-expire and clean up things that time out or for other reasons should not be left lingering.\n\nBy default, the frequency is every 5 minutes."
        },
        "taskTimeout": {
          "description": "Sets the task's heartbeat timeout, when to consider a task to be staled.\n\nOnce task is considered to be staled, the scheduler will shut it down on the next cycle.\n\nDefault value is 24 hours."
        }
      }
    },
    "search": {
      "description": "Configuration options for the search plugin",
      "type": "object",
      "properties": {
        "maxPageLimit": {
          "description": "Sets the maximum max page limit size. Defaults to 100.",
          "type": "number"
        },
        "maxTermLength": {
          "description": "Sets the maximum term length for the search string. Defaults to 100.",
          "type": "number"
        },
        "permissions": {
          "description": "Options related to the search integration with the Backstage permissions system",
          "type": "object",
          "properties": {
            "queryLatencyBudgetMs": {
              "description": "Limits the amount of time the search backend will spend retrieving and\nauthorizing results from the search engine when permissions are\nenabled. When the latency of the query endpoint reaches this threshold,\nthe results obtained up until that point will be returned, even if the\npage is incomplete.\n\nThis limit is only expected to be hit for broad queries from users with\nextremely restrictive visibility, or for very high page offsets.",
              "default": 1000,
              "type": "number"
            }
          }
        },
        "collators": {
          "type": "object",
          "properties": {
            "catalog": {
              "description": "Configuration options for `@backstage/plugin-search-backend-module-catalog`",
              "type": "object",
              "properties": {
                "locationTemplate": {
                  "description": "A templating string with placeholders, to form the final location of\nthe entity.\n\nDefaults to '/catalog/:namespace/:kind/:name'",
                  "type": "string"
                },
                "filter": {
                  "description": "A filter expression passed to the catalog client, to select what\nentities to collate.\n\nDefaults to no filter, ie indexing all entities.",
                  "type": "object",
                  "additionalProperties": true
                },
                "batchSize": {
                  "description": "The number of entities to process at a time. Keep this at a\nreasonable number to avoid overloading either the catalog or the\nsearch backend.\n\nDefaults to 500",
                  "type": "number"
                },
                "schedule": {
                  "description": "The schedule for how often to run the collation job."
                }
              }
            },
            "techdocs": {
              "description": "Configuration options for `@backstage/plugin-search-backend-module-techdocs`",
              "type": "object",
              "properties": {
                "schedule": {
                  "description": "The schedule for how often to run the collation job."
                },
                "locationTemplate": {
                  "description": "A templating string with placeholders, to form the final location of\nthe entity.\n\nDefaults to `'/docs/:namespace/:kind/:name/:path'`.",
                  "type": "string"
                },
                "parallelismLimit": {
                  "description": "An abstract value that controls the concurrency level of the\ncollation process. Increasing this value will both increase the\nnumber of entities fetched at a time from the catalog, as well as how\nmany things are being processed concurrently.\n\nDefaults to `10`.",
                  "type": "number"
                },
                "legacyPathCasing": {
                  "description": "Defaults to `false`.",
                  "type": "boolean"
                }
              }
            }
          }
        },
        "pg": {
          "description": "Options for PG",
          "type": "object",
          "properties": {
            "highlightOptions": {
              "description": "Options for configuring highlight settings\nSee https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE",
              "type": "object",
              "properties": {
                "useHighlight": {
                  "description": "Used to enable to disable the highlight feature. The default value is true",
                  "type": "boolean"
                },
                "maxWords": {
                  "description": "Used to set the longest headlines to output. The default value is 35.",
                  "type": "number"
                },
                "minWords": {
                  "description": "Used to set the shortest headlines to output. The default value is 15.",
                  "type": "number"
                },
                "shortWord": {
                  "description": "Words of this length or less will be dropped at the start and end of a headline, unless they are query terms.\nThe default value of three (3) eliminates common English articles.",
                  "type": "number"
                },
                "highlightAll": {
                  "description": "If true the whole document will be used as the headline, ignoring the preceding three parameters. The default is false.",
                  "type": "boolean"
                },
                "maxFragments": {
                  "description": "Maximum number of text fragments to display. The default value of zero selects a non-fragment-based headline generation method.\nA value greater than zero selects fragment-based headline generation (see the linked documentation above for more details).",
                  "type": "number"
                },
                "fragmentDelimiter": {
                  "description": "Delimiter string used to concatenate fragments. Defaults to \" ... \".",
                  "type": "string"
                }
              }
            },
            "normalization": {
              "description": "Ranking functions use an integer bit mask to control document length impact on rank. The default value is 0",
              "type": [
                "string",
                "number"
              ]
            },
            "indexerBatchSize": {
              "description": "Batch size to use when indexing",
              "type": "number"
            }
          }
        },
        "query": {
          "description": "An object representing the default search query configuration.\nBy configuring and modifying the values of this object,\nyou can customize the default values of the search queries\nand define how it behaves by default.",
          "type": "object",
          "properties": {
            "pageLimit": {
              "description": "A number indicating the maximum number of results to be returned\nper page during pagination.",
              "visibility": "frontend",
              "enum": [
                10,
                100,
                25,
                50
              ],
              "type": "number"
            }
          }
        }
      }
    },
    "techdocs": {
      "description": "Configuration options for the techdocs-backend plugin",
      "type": "object",
      "properties": {
        "builder": {
          "description": "Documentation building process depends on the builder attr",
          "visibility": "frontend",
          "enum": [
            "external",
            "local"
          ],
          "type": "string"
        },
        "generator": {
          "description": "Techdocs generator information",
          "type": "object",
          "required": [
            "runIn"
          ],
          "properties": {
            "runIn": {
              "description": "Where to run the techdocs (mkdocs) generator",
              "enum": [
                "docker",
                "local"
              ],
              "type": "string"
            },
            "dockerImage": {
              "description": "Override the default techdocs docker image",
              "type": "string"
            },
            "pullImage": {
              "description": "Pull the latest docker image",
              "type": "boolean"
            },
            "mkdocs": {
              "description": "Override behavior specific to mkdocs.",
              "type": "object",
              "properties": {
                "legacyCopyReadmeMdToIndexMd": {
                  "description": "(Optional and not recommended) Configures the techdocs generator to\nattempt to ensure an index.md exists falling back to using <docs-dir>/README.md\nor README.md in case a default <docs-dir>/index.md is not provided.\nNote that https://www.mkdocs.org/user-guide/configuration/#edit_uri behavior\nwill be broken in these scenarios.",
                  "type": "boolean"
                },
                "defaultPlugins": {
                  "description": "List of mkdocs plugins which should be added as default to all mkdocs.yml files.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "publisher": {
          "description": "Techdocs publisher information",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "const": "local"
                },
                "local": {
                  "description": "Optional when 'type' is set to local",
                  "type": "object",
                  "properties": {
                    "publishDirectory": {
                      "description": "(Optional) Directory to store generated static files.",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "type"
              ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "const": "awsS3"
                },
                "awsS3": {
                  "description": "Required when 'type' is set to awsS3",
                  "type": "object",
                  "required": [
                    "bucketName"
                  ],
                  "properties": {
                    "accountId": {
                      "description": "(Optional) The AWS account ID where the storage bucket is located.\nCredentials for the account ID will be sourced from the 'aws' app config section.\nSee the\n[integration-aws-node package](https://github.com/backstage/backstage/blob/master/packages/integration-aws-node/README.md)\nfor details on how to configure the credentials in the app config.\nIf account ID is not set and no credentials are set, environment variables or aws config file will be used to authenticate.",
                      "visibility": "secret",
                      "type": "string"
                    },
                    "credentials": {
                      "description": "(Optional) Credentials used to access a storage bucket.\nThis section is now deprecated. Configuring the account ID is now preferred, with credentials in the 'aws'\napp config section.\nIf not set and no account ID is set, environment variables or aws config file will be used to authenticate.",
                      "visibility": "secret",
                      "type": "object",
                      "properties": {
                        "accessKeyId": {
                          "description": "User access key id",
                          "visibility": "secret",
                          "type": "string"
                        },
                        "secretAccessKey": {
                          "description": "User secret access key",
                          "visibility": "secret",
                          "type": "string"
                        },
                        "roleArn": {
                          "description": "ARN of role to be assumed",
                          "type": "string"
                        }
                      }
                    },
                    "bucketName": {
                      "description": "(Required) Cloud Storage Bucket Name",
                      "type": "string"
                    },
                    "bucketRootPath": {
                      "description": "(Optional) Location in storage bucket to save files\nIf not set, the default location will be the root of the storage bucket",
                      "type": "string"
                    },
                    "region": {
                      "description": "(Optional) AWS Region.\nIf not set, AWS_REGION environment variable or aws config file will be used.",
                      "visibility": "secret",
                      "type": "string"
                    },
                    "endpoint": {
                      "description": "(Optional) AWS Endpoint.\nThe endpoint URI to send requests to. The default endpoint is built from the configured region.",
                      "visibility": "secret",
                      "type": "string"
                    },
                    "s3ForcePathStyle": {
                      "description": "(Optional) Whether to use path style URLs when communicating with S3.\nDefaults to false.\nThis allows providers like LocalStack, Minio and Wasabi (and possibly others) to be used to host tech docs.",
                      "type": "boolean"
                    },
                    "sse": {
                      "description": "(Optional) AWS Server Side Encryption\nDefaults to undefined.\nIf not set, encrypted buckets will fail to publish.\nhttps://docs.aws.amazon.com/AmazonS3/latest/userguide/specifying-s3-encryption.html",
                      "enum": [
                        "AES256",
                        "aws:kms"
                      ],
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "type"
              ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "const": "openStackSwift"
                },
                "openStackSwift": {
                  "description": "Required when 'type' is set to openStackSwift",
                  "type": "object",
                  "required": [
                    "authUrl",
                    "containerName",
                    "credentials",
                    "swiftUrl"
                  ],
                  "properties": {
                    "credentials": {
                      "description": "(Required) Credentials used to access a storage bucket.",
                      "visibility": "secret",
                      "type": "object",
                      "required": [
                        "id",
                        "secret"
                      ],
                      "properties": {
                        "id": {
                          "description": "(Required) Application Credential ID",
                          "visibility": "secret",
                          "type": "string"
                        },
                        "secret": {
                          "description": "(Required) Application Credential Secret",
                          "visibility": "secret",
                          "type": "string"
                        }
                      }
                    },
                    "containerName": {
                      "description": "(Required) Cloud Storage Container Name",
                      "type": "string"
                    },
                    "authUrl": {
                      "description": "(Required) Auth url sometimes OpenStack uses different port check your OpenStack apis.",
                      "type": "string"
                    },
                    "swiftUrl": {
                      "description": "(Required) Swift URL",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "type"
              ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "const": "azureBlobStorage"
                },
                "azureBlobStorage": {
                  "description": "Required when 'type' is set to azureBlobStorage",
                  "type": "object",
                  "required": [
                    "containerName"
                  ],
                  "properties": {
                    "connectionString": {
                      "description": "(Optional) Connection string of the storage container.",
                      "visibility": "secret",
                      "type": "string"
                    },
                    "credentials": {
                      "description": "(Optional) Credentials used to access a storage container.",
                      "visibility": "secret",
                      "type": "object",
                      "required": [
                        "accountName"
                      ],
                      "properties": {
                        "accountName": {
                          "description": "Account access name",
                          "visibility": "secret",
                          "type": "string"
                        },
                        "accountKey": {
                          "description": "(Optional) Account secret primary key\nIf not set, environment variables will be used to authenticate.",
                          "visibility": "secret",
                          "type": "string"
                        }
                      }
                    },
                    "containerName": {
                      "description": "(Required) Cloud Storage Container Name",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "type"
              ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "const": "googleGcs"
                },
                "googleGcs": {
                  "description": "Required when 'type' is set to googleGcs",
                  "type": "object",
                  "required": [
                    "bucketName"
                  ],
                  "properties": {
                    "bucketName": {
                      "description": "(Required) Cloud Storage Bucket Name",
                      "type": "string"
                    },
                    "credentials": {
                      "description": "(Optional) API key used to write to a storage bucket.\nIf not set, environment variables will be used to authenticate.",
                      "visibility": "secret",
                      "type": "string"
                    },
                    "projectId": {
                      "description": "(Optional) GCP project ID that contains the bucket. Should be\nset if credentials is not set, or if the service account in\nthe credentials belongs to a different project to the bucket.",
                      "type": "string"
                    },
                    "bucketRootPath": {
                      "description": "(Optional) Location in storage bucket to save files\nIf not set, the default location will be the root of the storage bucket",
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "type"
              ]
            }
          ]
        },
        "cache": {
          "type": "object",
          "required": [
            "ttl"
          ],
          "properties": {
            "ttl": {
              "description": "The cache time-to-live for TechDocs sites (in milliseconds). Set this\nto a non-zero value to cache TechDocs sites and assets as they are\nread from storage.\n\nNote: you must also configure `backend.cache` appropriately as well,\nand to pass a PluginCacheManager instance to TechDocs Backend's\ncreateRouter method in your backend.",
              "type": "number"
            },
            "readTimeout": {
              "description": "The time (in milliseconds) that the TechDocs backend will wait for\na cache service to respond before continuing on as though the cached\nobject was not found (e.g. when the cache sercice is unavailable).\n\nDefaults to 1000 milliseconds.",
              "type": "number"
            }
          }
        },
        "legacyUseCaseSensitiveTripletPaths": {
          "description": "(Optional and not recommended) Prior to version [0.x.y] of TechDocs, docs\nsites could only be accessed over paths with case-sensitive entity triplets\ne.g. (namespace/Kind/name). If you are upgrading from an older version of\nTechDocs and are unable to perform the necessary migration of files in your\nexternal storage, you can set this value to `true` to temporarily revert to\nthe old, case-sensitive entity triplet behavior.",
          "type": "boolean",
          "visibility": "frontend"
        },
        "sanitizer": {
          "type": "object",
          "properties": {
            "allowedIframeHosts": {
              "description": "Allows iframe tag only for listed hosts\nExample:\n allowedIframeHosts: [\"example.com\"]\n this will allow all iframes with the host `example.com` in the src attribute",
              "visibility": "frontend",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedCustomElementTagNameRegExp": {
              "description": "Allows listed custom element tag name regex\nExample:\n allowedCustomElementTagNameRegExp: '^backstage-'\n this will allow all custom elements with tag name matching `^backstage-` like <backstage-custom-element /> etc.",
              "visibility": "frontend",
              "type": "string"
            },
            "allowedCustomElementAttributeNameRegExp": {
              "description": "Allows listed custom element attribute name regex\nExample:\n allowedCustomElementAttributeNameRegExp: 'attribute1|attribute2'\n this will allow all custom element attributes matching `attribute1` or `attribute2` like <backstage-custom-element attribute1=\"yes\" attribute2/>",
              "visibility": "frontend",
              "type": "string"
            }
          }
        }
      }
    },
    "organization": {
      "description": "Configuration that provides information about the organization that the app is for.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the organization that the app belongs to.",
          "visibility": "frontend",
          "type": "string"
        }
      }
    },
    "homepage": {
      "description": "This config was used by the HomepageTimer but has been replaced  by the HeaderWorldClock in the home plugin",
      "deprecated": "in favor of the HeaderWorldClock which is found in the home plugin",
      "type": "object",
      "properties": {
        "clocks": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "label",
              "timezone"
            ],
            "properties": {
              "label": {
                "visibility": "frontend",
                "type": "string"
              },
              "timezone": {
                "visibility": "frontend",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "enableExperimentalRedirectFlow": {
      "description": "Enable redirect authentication flow type, instead of a popup for authentication.",
      "visibility": "frontend",
      "type": "boolean"
    },
    "integrations": {
      "description": "Configuration for integrations towards various external repository provider systems",
      "visibility": "frontend",
      "type": "object",
      "properties": {
        "azure": {
          "description": "Integration configuration for Azure",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "host"
            ],
            "properties": {
              "host": {
                "description": "The hostname of the given Azure instance",
                "visibility": "frontend",
                "type": "string"
              },
              "token": {
                "description": "Token used to authenticate requests.",
                "visibility": "secret",
                "deprecated": "Use `credentials` instead.",
                "type": "string"
              },
              "credential": {
                "description": "The credential to use for requests.\n\nIf no credential is specified anonymous access is used.",
                "deepVisibility": "secret",
                "deprecated": "Use `credentials` instead.",
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "tenantId": {
                    "type": "string"
                  },
                  "personalAccessToken": {
                    "type": "string"
                  }
                }
              },
              "credentials": {
                "description": "The credentials to use for requests. If multiple credentials are specified the first one that matches the organization is used.\nIf not organization matches the first credential without an organization is used.\n\nIf no credentials are specified at all, either a default credential (for Azure DevOps) or anonymous access (for Azure DevOps Server) is used.",
                "deepVisibility": "secret",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "type": "string"
                    },
                    "clientSecret": {
                      "type": "string"
                    },
                    "tenantId": {
                      "type": "string"
                    },
                    "personalAccessToken": {
                      "type": "string"
                    }
                  }
                }
              },
              "commitSigningKey": {
                "description": "PGP signing key for signing commits.",
                "visibility": "secret",
                "type": "string"
              }
            }
          }
        },
        "bitbucket": {
          "description": "Integration configuration for Bitbucket",
          "deprecated": "replaced by bitbucketCloud and bitbucketServer",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "host"
            ],
            "properties": {
              "host": {
                "description": "The hostname of the given Bitbucket instance",
                "visibility": "frontend",
                "type": "string"
              },
              "token": {
                "description": "Token used to authenticate requests.",
                "visibility": "secret",
                "type": "string"
              },
              "apiBaseUrl": {
                "description": "The base url for the Bitbucket API, for example https://api.bitbucket.org/2.0",
                "visibility": "frontend",
                "type": "string"
              },
              "username": {
                "description": "The username to use for authenticated requests.",
                "visibility": "secret",
                "type": "string"
              },
              "appPassword": {
                "description": "Bitbucket app password used to authenticate requests.",
                "visibility": "secret",
                "type": "string"
              },
              "commitSigningKey": {
                "description": "PGP signing key for signing commits.",
                "visibility": "secret",
                "type": "string"
              }
            }
          }
        },
        "bitbucketCloud": {
          "description": "Integration configuration for Bitbucket Cloud",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "appPassword",
              "username"
            ],
            "properties": {
              "username": {
                "description": "The username to use for authenticated requests.",
                "visibility": "secret",
                "type": "string"
              },
              "appPassword": {
                "description": "Bitbucket Cloud app password used to authenticate requests.",
                "visibility": "secret",
                "type": "string"
              },
              "commitSigningKey": {
                "description": "PGP signing key for signing commits.",
                "visibility": "secret",
                "type": "string"
              }
            }
          }
        },
        "bitbucketServer": {
          "description": "Integration configuration for Bitbucket Server",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "host"
            ],
            "properties": {
              "host": {
                "description": "The hostname of the given Bitbucket Server instance",
                "visibility": "frontend",
                "type": "string"
              },
              "token": {
                "description": "Token used to authenticate requests.",
                "visibility": "secret",
                "type": "string"
              },
              "username": {
                "description": "Username used to authenticate requests with Basic Auth.",
                "visibility": "secret",
                "type": "string"
              },
              "password": {
                "description": "Password (or token as password) used to authenticate requests with Basic Auth.",
                "visibility": "secret",
                "type": "string"
              },
              "apiBaseUrl": {
                "description": "The base url for the Bitbucket Server API, for example https://<host>/rest/api/1.0",
                "visibility": "frontend",
                "type": "string"
              },
              "commitSigningKey": {
                "description": "PGP signing key for signing commits.",
                "visibility": "secret",
                "type": "string"
              }
            }
          }
        },
        "gerrit": {
          "description": "Integration configuration for Gerrit",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "gitilesBaseUrl",
              "host"
            ],
            "properties": {
              "host": {
                "description": "The hostname of the given Gerrit instance",
                "visibility": "frontend",
                "type": "string"
              },
              "baseUrl": {
                "description": "The base url for the Gerrit instance.",
                "visibility": "frontend",
                "type": "string"
              },
              "gitilesBaseUrl": {
                "description": "The gitiles base url.",
                "visibility": "frontend",
                "type": "string"
              },
              "cloneUrl": {
                "description": "The base url for cloning repos.",
                "visibility": "frontend",
                "type": "string"
              },
              "username": {
                "description": "The username to use for authenticated requests.",
                "visibility": "secret",
                "type": "string"
              },
              "password": {
                "description": "Gerrit password used to authenticate requests. This can be either a password\nor a generated access token.",
                "visibility": "secret",
                "type": "string"
              },
              "commitSigningKey": {
                "description": "PGP signing key for signing commits.",
                "visibility": "secret",
                "type": "string"
              }
            }
          }
        },
        "github": {
          "description": "Integration configuration for GitHub",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "host"
            ],
            "properties": {
              "host": {
                "description": "The hostname of the given GitHub instance",
                "visibility": "frontend",
                "type": "string"
              },
              "token": {
                "description": "Token used to authenticate requests.",
                "visibility": "secret",
                "type": "string"
              },
              "apiBaseUrl": {
                "description": "The base url for the GitHub API, for example https://api.github.com",
                "visibility": "frontend",
                "type": "string"
              },
              "rawBaseUrl": {
                "description": "The base url for GitHub raw resources, for example https://raw.githubusercontent.com",
                "visibility": "frontend",
                "type": "string"
              },
              "apps": {
                "description": "GitHub Apps configuration",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "appId",
                    "clientId",
                    "clientSecret",
                    "privateKey",
                    "webhookSecret"
                  ],
                  "properties": {
                    "appId": {
                      "description": "The numeric GitHub App ID, string for environment variables",
                      "type": [
                        "string",
                        "number"
                      ]
                    },
                    "privateKey": {
                      "description": "The private key to use for auth against the app",
                      "visibility": "secret",
                      "type": "string"
                    },
                    "webhookSecret": {
                      "description": "The secret used for webhooks",
                      "visibility": "secret",
                      "type": "string"
                    },
                    "clientId": {
                      "description": "The client ID to use",
                      "type": "string"
                    },
                    "clientSecret": {
                      "description": "The client secret to use",
                      "visibility": "secret",
                      "type": "string"
                    },
                    "allowedInstallationOwners": {
                      "description": "List of installation owners allowed to be used by this GitHub app. The GitHub UI does not provide a way to list the installations.\nHowever you can list the installations with the GitHub API. You can find the list of installations here:\nhttps://api.github.com/app/installations\nThe relevant documentation for this is here.\nhttps://docs.github.com/en/rest/reference/apps#list-installations-for-the-authenticated-app--code-samples",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "gitlab": {
          "description": "Integration configuration for GitLab",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "host"
            ],
            "properties": {
              "host": {
                "description": "The host of the target that this matches on, e.g. \"gitlab.com\".",
                "visibility": "frontend",
                "type": "string"
              },
              "apiBaseUrl": {
                "description": "The base URL of the API of this provider, e.g.\n\"https://gitlab.com/api/v4\", with no trailing slash.\n\nMay be omitted specifically for public GitLab; then it will be deduced.",
                "visibility": "frontend",
                "type": "string"
              },
              "token": {
                "description": "The authorization token to use for requests to this provider.\n\nIf no token is specified, anonymous access is used.",
                "visibility": "secret",
                "type": "string"
              },
              "baseUrl": {
                "description": "The baseUrl of this provider, e.g. \"https://gitlab.com\", which is\npassed into the GitLab client.\n\nIf no baseUrl is provided, it will default to https://${host}.",
                "visibility": "frontend",
                "type": "string"
              },
              "commitSigningKey": {
                "description": "PGP signing key for signing commits.",
                "visibility": "secret",
                "type": "string"
              }
            }
          }
        },
        "googleGcs": {
          "description": "Integration configuration for Google Cloud Storage",
          "type": "object",
          "properties": {
            "clientEmail": {
              "description": "Service account email used to authenticate requests.",
              "type": "string"
            },
            "privateKey": {
              "description": "Service account private key used to authenticate requests.",
              "visibility": "secret",
              "type": "string"
            }
          }
        },
        "awsS3": {
          "description": "Integration configuration for AWS S3 Service",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "endpoint": {
                "description": "AWS Endpoint.\nThe endpoint URI to send requests to. The default endpoint is built from the configured region.",
                "visibility": "frontend",
                "type": "string"
              },
              "s3ForcePathStyle": {
                "description": "Whether to use path style URLs when communicating with S3.\nDefaults to false.\nThis allows providers like LocalStack, Minio and Wasabi (and possibly others) to be used.",
                "visibility": "frontend",
                "type": "boolean"
              },
              "accessKeyId": {
                "description": "Account access key used to authenticate requests.",
                "type": "string"
              },
              "secretAccessKey": {
                "description": "Account secret key used to authenticate requests.",
                "visibility": "secret",
                "type": "string"
              },
              "roleArn": {
                "description": "ARN of the role to be assumed",
                "type": "string"
              },
              "externalId": {
                "description": "External ID to use when assuming role",
                "type": "string"
              }
            }
          }
        },
        "gitea": {
          "description": "Integration configuration for Gitea",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "host"
            ],
            "properties": {
              "host": {
                "description": "The hostname of the given Gitea instance",
                "visibility": "frontend",
                "type": "string"
              },
              "baseUrl": {
                "description": "The base url for the Gitea instance.",
                "visibility": "frontend",
                "type": "string"
              },
              "username": {
                "description": "The username to use for authenticated requests.",
                "visibility": "secret",
                "type": "string"
              },
              "password": {
                "description": "Gitea password used to authenticate requests. This can be either a password\nor a generated access token.",
                "visibility": "secret",
                "type": "string"
              },
              "commitSigningKey": {
                "description": "PGP signing key for signing commits.",
                "visibility": "secret",
                "type": "string"
              }
            }
          }
        },
        "harness": {
          "description": "Integration configuration for Harness Code",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "host"
            ],
            "properties": {
              "host": {
                "description": "The hostname of the given Harness Code instance",
                "visibility": "frontend",
                "type": "string"
              },
              "apiKey": {
                "description": "The apikey to use for authenticated requests.",
                "visibility": "secret",
                "type": "string"
              },
              "token": {
                "description": "Harness Code token used to authenticate requests. This can be either a generated access token.",
                "visibility": "secret",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "aws": {
      "description": "Configuration for access to AWS accounts",
      "type": "object",
      "properties": {
        "accountDefaults": {
          "description": "Defaults for retrieving AWS account credentials",
          "type": "object",
          "properties": {
            "roleName": {
              "description": "The IAM role to assume to retrieve temporary AWS credentials",
              "type": "string"
            },
            "partition": {
              "description": "The AWS partition of the IAM role, e.g. \"aws\", \"aws-cn\"",
              "type": "string"
            },
            "region": {
              "description": "The STS regional endpoint to use when retrieving temporary AWS credentials, e.g. \"ap-northeast-1\"",
              "type": "string"
            },
            "externalId": {
              "description": "The unique identifier needed to assume the role to retrieve temporary AWS credentials",
              "visibility": "secret",
              "type": "string"
            }
          }
        },
        "mainAccount": {
          "description": "Main account to use for retrieving AWS account credentials",
          "type": "object",
          "properties": {
            "accessKeyId": {
              "description": "The access key ID for a set of static AWS credentials",
              "visibility": "secret",
              "type": "string"
            },
            "secretAccessKey": {
              "description": "The secret access key for a set of static AWS credentials",
              "visibility": "secret",
              "type": "string"
            },
            "profile": {
              "description": "The configuration profile from a credentials file at ~/.aws/credentials and\na configuration file at ~/.aws/config.",
              "type": "string"
            },
            "region": {
              "description": "The STS regional endpoint to use for the main account, e.g. \"ap-northeast-1\"",
              "type": "string"
            }
          }
        },
        "accounts": {
          "description": "Configuration for retrieving AWS accounts credentials",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "accountId"
            ],
            "properties": {
              "accountId": {
                "description": "The account ID of the target account that this matches on, e.g. \"123456789012\"",
                "type": "string"
              },
              "accessKeyId": {
                "description": "The access key ID for a set of static AWS credentials",
                "visibility": "secret",
                "type": "string"
              },
              "secretAccessKey": {
                "description": "The secret access key for a set of static AWS credentials",
                "visibility": "secret",
                "type": "string"
              },
              "profile": {
                "description": "The configuration profile from a credentials file at ~/.aws/credentials and\na configuration file at ~/.aws/config.",
                "type": "string"
              },
              "roleName": {
                "description": "The IAM role to assume to retrieve temporary AWS credentials",
                "type": "string"
              },
              "partition": {
                "description": "The AWS partition of the IAM role, e.g. \"aws\", \"aws-cn\"",
                "type": "string"
              },
              "region": {
                "description": "The STS regional endpoint to use when retrieving temporary AWS credentials, e.g. \"ap-northeast-1\"",
                "type": "string"
              },
              "externalId": {
                "description": "The unique identifier needed to assume the role to retrieve temporary AWS credentials",
                "visibility": "secret",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "events": {
      "type": "object",
      "properties": {
        "useEventBus": {
          "description": "Whether to use the event bus API in the events plugin backend to\ndistribute events across multiple instances when publishing and\nsubscribing to events.\n\nThe default is 'auto', which means means that the event bus API will be\nused if it's available, but will be disabled if the events backend\nreturns a 404.\n\nIf set to 'never', the events service will only ever publish events\nlocally to the same instance, while if set to 'always', the event bus API\nwill never be disabled, even if the events backend returns a 404.",
          "enum": [
            "always",
            "auto",
            "never"
          ],
          "type": "string"
        }
      }
    }
  },
  "description": "This is the schema describing the structure of the app-config.yaml configuration file."
}
